{
  "$schema": "http://json-schema.org/draft-07/schema",
  "title": "Jest Target",
  "description": "Jest target options",
  "type": "object",
  "properties": {
    "devServerTarget": {
      "type": "string",
      "description": "A dev-server builder target to run tests against in the format of `project:target[:configuration]`. You can also pass in more than one configuration name as a comma-separated list. Example: `project:target:production,staging`.",
      "pattern": "^((([^:\\s]+)?:)?[^:\\s]+(:[^\\s]+)?)?$"
    },
    "port": {
      "type": "number",
      "description": "The port to use to serve the application."
    },
    "host": {
      "type": "string",
      "description": "Host to listen on."
    },
    "baseUrl": {
      "type": "string",
      "description": "Base URL for playwright to connect to."
    },

    "cache": {
      "type": "boolean",
      "description": "Whether to use the transform cache. Disable the cache using --no-cache."
    },
    "changedFilesWithAncestor": {
      "type": "boolean",
      "description": "Runs tests related to the current changes and the changes made in the last commit. Behaves similarly to `--only-changed`."
    },
    "changedSince": {
      "type": "string",
      "description": "Runs tests related to the changes since the provided branch. If the current branch has diverged from the given branch, then only changes made locally will be tested. Behaves similarly to `--only-changed`."
    },
    "ci": {
      "type": "boolean",
      "description": "Whether to run Jest in continuous integration (CI) mode. This option is on by default in most popular CI environments. It will prevent snapshots from being written unless explicitly requested."
    },
    "clearCache": {
      "type": "boolean",
      "description": "Clears the configured Jest cache directory and then exits. Default directory can be found by calling `--show-config`"
    },
    "config": {
      "type": "string",
      "description": "The path to a jest config file specifying how to find and execute tests. If no rootDir is set in the config, the directory containing the config file is assumed to be the rootDir for the project."
    },
    "colors": {
      "type": "boolean",
      "description": "Forces test results output color highlighting (even if stdout is not a TTY). Set to false if you would like to have no colors.",
      "aliases": ["color"]
    },
    "debug": {
      "type": "boolean",
      "description": "Print debugging info about your jest config."
    },
    "detectOpenHandles": {
      "type": "boolean",
      "description": "Print out remaining open handles preventing Jest from exiting at the end of a test run. Implies `--run-in-band`."
    },
    "expand": {
      "type": "boolean",
      "description": "Use this flag to show full diffs instead of a patch.",
      "aliases": ["e"]
    },
    "findRelatedTests": {
      "type": "boolean",
      "description": "Find related tests for a list of source files that were passed in as arguments. Useful for pre-commit hook integration to run the minimal amount of tests necessary."
    },
    "forceExit": {
      "type": "boolean",
      "description": "Force Jest to exit after all tests have completed running. This is useful when resources set up by test code cannot be adequately cleaned up."
    },
    "json": {
      "type": "boolean",
      "description": "Prints the test results in JSON. This mode will send all other test output and user messages to stderr."
    },
    "lastCommit": {
      "type": "boolean",
      "description": "Run all tests affected by file changes in the last commit made. Behaves similarly to `--only-changed`."
    },
    "listTests": {
      "type": "boolean",
      "description": "Lists all tests Jest will run given the arguments and exits. Most useful in a CI system together with `--findRelatedTests` to determine the tests Jest will run based on specific files"
    },
    "logHeapUsage": {
      "type": "boolean",
      "description": "Logs the heap usage after every test. Useful to debug memory leaks. Use together with `--run-in-band` and `--expose-gc` in node."
    },
    "maxConcurrency": {
      "type": "number",
      "description": "Specifies the maximum number of tests that are allowed to run concurrently. This only affects tests using `test.concurrent`."
    },
    "maxWorkers": {
      "oneOf": [{"type": "string"}, {"type": "number"}],
      "description": "Specifies the maximum number of workers the worker-pool will spawn for running tests. This defaults to the number of the cores available on your machine. (its usually best not to override this default)",
      "aliases": ["w"]
    },
    "noStackTrace": {
      "type": "boolean",
      "description": "Disables stack trace in test results output"
    },
    "onlyChanged": {
      "type": "boolean",
      "description": "Attempts to identify which tests to run based on which files have changed in the current repository. Only works if you're running tests in a git or hg repository at the moment.",
      "aliases": ["o"]
    },
    "outputFile": {
      "type": "string",
      "description": "Write test results to a file when the `--json` option is also specified."
    },
    "passWithNoTests": {
      "type": "boolean",
      "description": "Will not fail if no tests are found (for example while using `--test-path-pattern`)"
    },
    "runInBand": {
      "type": "boolean",
      "description": "Run all tests serially in the current process (rather than creating a worker pool of child processes that run tests). This is sometimes useful for debugging, but such use cases are pretty rare.",
      "aliases": ["i"]
    },
    "runTestsByPath": {
      "type": "boolean",
      "description": "Used when provided patterns are exact file paths. This avoids converting them into a regular expression and matching it against every single file."
    },
    "showConfig": {
      "type": "boolean",
      "description": "Print your jest config and then exits"
    },
    "silent": {
      "type": "boolean",
      "description": "Prevent tests from printing messages through the console"
    },
    "testLocationInResults": {
      "type": "boolean",
      "description": "Add `location` information to the test results"
    },
    "testNamePattern": {
      "type": "string",
      "description": "Run only tests with a name that matches the regex pattern",
      "aliases": ["t"]
    },
    "testPathPattern": {
      "type": "array",
      "items": {"type": "string"},
      "description": "A regexp pattern string that is matched against all tests paths before executing the test",
      "aliases": ["p"]
    },
    "updateSnapshot": {
      "type": "boolean",
      "description": "Use this flag to re-record snapshots. Can be used together with `--test-path-pattern` or with `--test-name-pattern` to re-record snapshot for test matching the pattern",
      "aliases": ["u"]
    },
    "useStderr": {
      "type": "boolean",
      "description": "Divert all output to stderr"
    },
    "verbose": {
      "type": "boolean",
      "description": "Display individual test results with the test suite hierarchy."
    },
    "version": {
      "type": "boolean",
      "description": "Print the version and exit"
    },
    "watch": {
      "type": "boolean",
      "description": "Watch files for changes and rerun tests related to changed files. If you want to re-run all tests when a file has changed, use the `--watch-all` option."
    },
    "watchAll": {
      "type": "boolean",
      "description": "Watch files for changes and rerun all tests. If you want to re-run only the tests related to the changed files, use the `--watch` option."
    },
    "watchman": {
      "type": "boolean",
      "description": "Whether to use watchman for file crawling, disable using --no-watchman"
    }
  },
  "additionalProperties": false
}
